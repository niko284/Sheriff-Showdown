--!strict
local cached_power = {}
local RECIPROCAL_LOG2_10 = 0.30102999566398114 -- 1 / math.log2(10)
local CACHED_POWERS: { { number } } = {
	{ 0x081C0288, 0xFA8FD5A0, -1220, -348 },
	{ 0xA23EBF76, 0xBAAEE17F, -1193, -340 },
	{ 0x3055AC76, 0x8B16FB20, -1166, -332 },
	{ 0x5DCE35EA, 0xCF42894A, -1140, -324 },
	{ 0x55653B2D, 0x9A6BB0AA, -1113, -316 },
	{ 0x3D1A45DF, 0xE61ACF03, -1087, -308 },
	{ 0xC79AC6CA, 0xAB70FE17, -1060, -300 },
	{ 0xBEBCDC4F, 0xFF77B1FC, -1034, -292 },
	{ 0x416BD60C, 0xBE5691EF, -1007, -284 },
	{ 0x907FFC3C, 0x8DD01FAD, -980, -276 },
	{ 0x31559A83, 0xD3515C28, -954, -268 },
	{ 0xADA6C9B5, 0x9D71AC8F, -927, -260 },
	{ 0x23EE8BCB, 0xEA9C2277, -901, -252 },
	{ 0x4078536D, 0xAECC4991, -874, -244 },
	{ 0x5DB6CE57, 0x823C1279, -847, -236 },
	{ 0x4DFB5637, 0xC2109436, -821, -228 },
	{ 0x3848984F, 0x9096EA6F, -794, -220 },
	{ 0x25823AC7, 0xD77485CB, -768, -212 },
	{ 0x97BF97F4, 0xA086CFCD, -741, -204 },
	{ 0x172AACE5, 0xEF340A98, -715, -196 },
	{ 0x2A35B28E, 0xB23867FB, -688, -188 },
	{ 0xD2C63F3B, 0x84C8D4DF, -661, -180 },
	{ 0x1AD3CDBA, 0xC5DD4427, -635, -172 },
	{ 0xBB25C996, 0x936B9FCE, -608, -164 },
	{ 0x7D62A584, 0xDBAC6C24, -582, -156 },
	{ 0x0D5FDAF6, 0xA3AB6658, -555, -148 },
	{ 0xDEC3F126, 0xF3E2F893, -529, -140 },
	{ 0xAAFF80B8, 0xB5B5ADA8, -502, -132 },
	{ 0x6C7C4A8B, 0x87625F05, -475, -124 },
	{ 0x34C13053, 0xC9BCFF60, -449, -116 },
	{ 0x91BA2655, 0x964E858C, -422, -108 },
	{ 0x70297EBD, 0xDFF97724, -396, -100 },
	{ 0xB8E5B88F, 0xA6DFBD9F, -369, -92 },
	{ 0x88747D94, 0xF8A95FCF, -343, -84 },
	{ 0x8FA89BCF, 0xB9447093, -316, -76 },
	{ 0xBF0F156B, 0x8A08F0F8, -289, -68 },
	{ 0x653131B6, 0xCDB02555, -263, -60 },
	{ 0xD07B7FAC, 0x993FE2C6, -236, -52 },
	{ 0x2A2B3B06, 0xE45C10C4, -210, -44 },
	{ 0x697392D3, 0xAA242499, -183, -36 },
	{ 0x8300CA0E, 0xFD87B5F2, -157, -28 },
	{ 0x92111AEB, 0xBCE50864, -130, -20 },
	{ 0x6F5088CC, 0x8CBCCC09, -103, -12 },
	{ 0xE219652C, 0xD1B71758, -77, -4 },
	{ 0x00000000, 0x9C400000, -50, 4 },
	{ 0x00000000, 0xE8D4A510, -24, 12 },
	{ 0xAC620000, 0xAD78EBC5, 3, 20 },
	{ 0xF8940984, 0x813F3978, 30, 28 },
	{ 0xC90715B3, 0xC097CE7B, 56, 36 },
	{ 0x7BEA5C70, 0x8F7E32CE, 83, 44 },
	{ 0xABE98068, 0xD5D238A4, 109, 52 },
	{ 0x179A2245, 0x9F4F2726, 136, 60 },
	{ 0xD4C4FB27, 0xED63A231, 162, 68 },
	{ 0x8CC8ADA8, 0xB0DE6538, 189, 76 },
	{ 0x1AAB65DB, 0x83C7088E, 216, 84 },
	{ 0x42711D9A, 0xC45D1DF9, 242, 92 },
	{ 0xA61BE758, 0x924D692C, 269, 100 },
	{ 0x1A708DEA, 0xDA01EE64, 295, 108 },
	{ 0x9AEF774A, 0xA26DA399, 322, 116 },
	{ 0xB47D6B85, 0xF209787B, 348, 124 },
	{ 0x79DD1877, 0xB454E4A1, 375, 132 },
	{ 0x5B9BC5C2, 0x865B8692, 402, 140 },
	{ 0xC8965D3D, 0xC83553C5, 428, 148 },
	{ 0xFA97A0B3, 0x952AB45C, 455, 156 },
	{ 0x99A05FE3, 0xDE469FBD, 481, 164 },
	{ 0xDB398C25, 0xA59BC234, 508, 172 },
	{ 0xA3989F5C, 0xF6C69A72, 534, 180 },
	{ 0x54E9BECE, 0xB7DCBF53, 561, 188 },
	{ 0xF22241E2, 0x88FCF317, 588, 196 },
	{ 0xD35C78A5, 0xCC20CE9B, 614, 204 },
	{ 0x7B2153DF, 0x98165AF3, 641, 212 },
	{ 0x971F303A, 0xE2A0B5DC, 667, 220 },
	{ 0x5CE3B396, 0xA8D9D153, 694, 228 },
	{ 0xA4A7443C, 0xFB9B7CD9, 720, 236 },
	{ 0xA7A44410, 0xBB764C4C, 747, 244 },
	{ 0xB6409C1A, 0x8BAB8EEF, 774, 252 },
	{ 0xA657842C, 0xD01FEF10, 800, 260 },
	{ 0xE9913129, 0x9B10A4E5, 827, 268 },
	{ 0xA19C0C9D, 0xE7109BFB, 853, 276 },
	{ 0x623BF429, 0xAC2820D9, 880, 284 },
	{ 0x7AA7CF85, 0x80444B5E, 907, 292 },
	{ 0x03ACDD2D, 0xBF21E440, 933, 300 },
	{ 0x5E44FF8F, 0x8E679C2F, 960, 308 },
	{ 0x9C8CB841, 0xD433179D, 986, 316 },
	{ 0xB4E31BA9, 0x9E19DB92, 1013, 324 },
	{ 0xBADF77D9, 0xEB96BF6E, 1039, 332 },
	{ 0x9BF0EE6B, 0xAF87023B, 1066, 340 },
}

-- PowersOfTenCache::GetCachedPowerForBinaryExponentRange
-- this port doesn't have the max_exponent argument
function cached_power.bin_expt_range(min_exponent: number): (number, number, number, number)
	-- 348 = cached power offset = -1 * the first decimal_exponent
	return table.unpack(
		CACHED_POWERS[bit32.rshift(348 + math.ceil((min_exponent + 63) * RECIPROCAL_LOG2_10) - 1, 3) + 2],
		nil,
		4
	)
end
-- PowersOfTenCache::GetCachedPowerForDecimalExponent
function cached_power.for_decimal_expt(expt: number): (number, number, number, number)
	return table.unpack(CACHED_POWERS[bit32.rshift(expt + 348, 3) + 1], nil, 4)
end

return cached_power
